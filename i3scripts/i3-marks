#!/bin/bash
#

#
# Assign a 2 digit mark to a window.
#
numeric()
{
    # Generate a random 2 digit mark.  Reject and retry if it matches
    # an assigned mark. The retry loop takes more time as the number
    # of marked containers approaches 100.
    while : ; do
        id=$((10#$(date +%N) % 100))
        id=$(printf "%02d" "${id}")
        count=$(for m in $(i3-msg -t get_marks | grep '[0-9][0-9]' | sed 's/,/\ /g');
                do echo "${m}"; done | grep -c "${id}")
        if [ "${count}" -eq 0 ]; then break; fi
    done
    sleep 1 # No need for caller to wait for the window.
    windowid=$(printf "0x%x" "$(xdotool getwindowfocus)")
    i3-msg "[id=\"${windowid}\"] mark --toggle \"${id}\""
    i3-msg "[con_mark=\"${id}\"] focus"
}

#
# Mark the focused window with the workspace name defined by the
# command alias.
#
# - Note: These marks could and should be hidden by prefixing with an
# - underscore. They are exposed for debug and test convenience only.
#
commandalias()
{
    cws=$(i3-msg -t get_workspaces | jq -r '.[] | select(.focused).name')
    windowid=$(printf "0x%x" "$(xdotool getwindowfocus)")
    # Fetch all marks in a list and walk that list, ignoring any mark
    # that isn't a "workspace mark as indicated by a lowercase letter
    # followed by another or a digit.  Remove any matching workspace
    # mark on the current window. Numeric marks (two digits) remain.
    for mark in $(i3-msg -t get_marks | \
                      sed 's/"[0-9][0-9]"//g' | sed 's/,/ /g'| sed 's/[][]//g')
    do
        i3-msg "[id=\"${windowid}\"] unmark ${mark}"
    done
    # Apply the new workspace mark, replacing the old one. This may
    # mean that the brute force loop above is utterly superfluous!
    i3-msg "[id=\"${windowid}\"] mark --add --replace ${cws}"

    # Having set up a window subscription and a listener for updating
    # marks, we can add another listener at the end like this, and it
    # could add yet another, etc.
    (floating) &
}

#
# If a workspace is empty and a terminal is launched from there, the
# terminal will be made floating, but should any other window appear,
# it will be tiled. THIS WORKS AND LOOKS GOOD.
#
floating()
{
    # /u/airblader wrote the code to return the identifiers of the
    # windows on the current workspace. Thanks!
    count=0
    # shellcheck disable=SC2034
    for w in $(xdotool search --onlyvisible --desktop \
                       "$(xprop -notype -root _NET_CURRENT_DESKTOP | \
                                                        cut -c 24-)" "" 2>/dev/null) ; do
        count=$((count + 1))
    done

    case "${count}" in
        (1)
            cc="[workspace=\"__focused__\" instance=\"xfce4-terminal\"]"
            cmds="floating enable, resize set 60 ppt 60 ppt, move position center;"
            i3-msg "$(printf "%s %s" "${cc}" "${cmds}")"
            ;;
        (2)
            cc="[workspace=\"__focused__\" instance=\"xfce4-terminal\"]"
            cmds="floating disable;"
            i3-msg "$(printf "%s %s" "${cc}" "${cmds}")"
            ;;
    esac
}


#
# When the monitor indicates a window change, walk the "linked list"
# with "commandalias" at the head.
#
update()
{
    # shellcheck disable=SC2034
    i3-msg -t subscribe -m '[ "window" ]' | \
        while read -r line ; do commandalias; read -r line; read -r line; done
    # Why 3 reads? I thought I had seen each event sending 3 lines.
    # With just 1 read, CPU usage rises, the marks on the title bar
    # flicker. This ought to be investigated further, but it works.
}


#
# Start here.
#

case "_$1" in
    (_numeric)
        numeric
        ;;
    (_commandalias)
        commandalias
        ;;
    (_floating)
        floating
        ;;
    (_update)
        update
        ;;
esac

#
# Done.
#
