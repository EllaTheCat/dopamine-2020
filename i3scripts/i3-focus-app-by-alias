#!/bin/bash
#
# i3-focus-app-by-alias
#

#
# Please personalise the "my-apps" table in the myscripts folder.
# This comment requires sshellcheck  c2154

###INSERT_APPS00_HERE###

#
# Focus an instance of an app given its command alias, launching the
# instance as necessary.
#
focus ()
{
    case "$1" in
	(e0)
	   emacsserver restart
	   ;;
    esac
    case "$1" in
	([a-z][0-9]|[a-z][a-z])
	    status=$(i3-msg "[workspace=\"$1\" con_mark=\"_$1\"] focus")
	    case "${status}" in
		(*true*)
		    i3-msg "workspace --no-auto-back-and-forth \"$1\""
		    ;;
		(*false*)
                    # "No window matches given criteria" is not an
                    # error here, it's one of two desired outcomes.
		    i3-msg "workspace --no-auto-back-and-forth \"$1\""
                    # Getting this to work was fun!
                    # We want the script to terminate hence using i3-msg.
		    # The enhanced PATH is exported by the dispatcher.
                    # The i3-msg recipient can't see the enhanced PATH.
                    # Extract and prepend the path directory components.

                    # shellcheck disable=SC2154
                    app=${apps[$1]}

                    # The executable name remains after removing the
                    # "longest matching suffix", defined by space star.
                    arg0=${app%% *}
                    # Get the full path to the executable, remove the
                    # name part, prepend the rest to the command.
                    path=$(command -v  "${arg0}")    # "which"
                    path=${path/${arg0}/}
                    i3-msg "exec --no-startup-id ${path}${app}"
		    # Allow the app enough time to initialise before applying
		    # the mark. The underscore makes the mark invisible; to
		    # confirm the mark. Use "i3-msg -t get_marks".
		    sleep 3
		    i3-msg "[workspace=\"$1\"]  mark --add  --replace _$1"
		    ;;
	    esac
	    ;;
    esac
}

#
# start|stop|restart the server for emacs clients.
#
emacsserver ()
{
    case "$1" in
	(start|restart)
	    delay=${2:-3}
	    if [ "$(pgrep  -c -f 'emacs -rv --daemon')" -eq 0 ]; then
		(emacs -rv --daemon) &
		# Ensure enogh time for the server to have started.
		sleep "${delay}"
	    fi
	    ;;
	(stop)
	    pkill -f 'emacs -rv --daemon'
	    ;;
    esac
}

#
# Start here.
#

eval "$1" "${@:2}"

#
# Done
#
